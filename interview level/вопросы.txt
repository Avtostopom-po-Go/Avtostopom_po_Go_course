На изучение (x-y дней)

3-7 дней (Хранение и передача информации 1)

==============================
    Redis
==============================
1. Какие основные типы данных в Redis и где они могут применяться в веб-приложениях?
2. Чем Redis отличается от традиционной реляционной базы данных?
3. Как организовать кеширование в сервисе с помощью Redis и какие паттерны кеширования ты знаешь (например, Cache Aside)?
4. Что такое TTL и каким образом его правильно использовать в Redis?
5. Как очистить кеш Redis?

==============================
    Kafka
==============================
1. Объясни базовые концепции Kafka: брокеры, топики, партиции, продюсеры, консьюмеры.
2. Как гарантировать доставку сообщений "ровно один раз" или хотя бы "по меньшей мере один раз" и "не больше одного раза"?
3. Зачем нужна репликация в Kafka и как это влияет на доступность и консистентность?
4. Что будет с данными Kafka при перезагрузки системы и почему?
5. Можно ли использовать шину данных Kafka для общение между микросервисами и чем это будет отличаться от общения по http соединениям?

==============================
    RabbitMQ
==============================
1. Объясни концепции обменников (exchanges), очередей (queues) и биндингов (bindings) в RabbitMQ.
2. В чём разница между Direct, Fanout, Topic и Header exchange?
3. Как в RabbitMQ реализовать подтверждение доставки сообщений (ack/nack) и зачем это нужно?
4. Когда выбирать RabbitMQ, а не Kafka?

==============================
    Отличия Kafka и RabbitMQ
==============================
1. Назови основные различия в моделях очередей и топиков между Kafka и RabbitMQ.
2. Когда стоит предпочесть RabbitMQ вместо Kafka и наоборот?

==============================
    NoSQL и MongoDB
==============================
1. Объясни, чем NoSQL базы отличаются от реляционных и в каких случаях они предпочтительнее.
2. Какие типы индексов есть в MongoDB и как они влияют на производительность запросов?
3. Что такое sharding в MongoDB и в каких случаях его стоит использовать?
4. Как обеспечить транзакционность операций в MongoDB?

---

4-9 дней (Хранение и передача информации 2)

==============================
    Углублённо Postgres
==============================
1. Расскажи о типах индексов в PostgreSQL (B-Tree, Hash, GIN, GiST) и в каких случаях какой лучше использовать(подробнее про B-Tree). Какие плюсы и минусы у всех индексов?
2. Как работают транзакции в PostgreSQL? Какие виды транзакций бывают и чем отличаются? Что такое ACID и уровни изоляции транзакций?
3. Что такое шардирование, партицирование, репликации и когда применяются эти механизмы?
4. Чем отличается логическая репликация от физической и в каких случаях использовать одну вместо другой?
5. Как пользоваться `EXPLAIN` и `EXPLAIN ANALYZE` для анализа производительности запросов и на что обращать внимание в плане выполнения плана?

---

1-2 дня (HTTP API)

==============================
    HTTP/HTTPS
==============================
1. В чём разница между HTTP и HTTPS на низком уровне?
2. Что такое TLS и зачем нужен сертификат?
3. Разница между HTTP/2 и HTTP/1.1?
4. Почему все не перешли на HTTP/2?

==============================
    gRPC
==============================
1. В чём преимущества gRPC по сравнению с REST?
2. Как работает Protocol Buffers (protobuf) и чем они хороши?
3. Как в gRPC реализуется стриминг данных?
4. Когда стоит использовать gRPC, а когда REST?

---

1-2 дня (Автоматизация)

==============================
    CI/CD
==============================
1. Что такое CI/CD и зачем он нужен в процессе разработки?
2. Какие основные этапы есть в типичном CI/CD пайплайне?
3. Чем отличаются GitLab от GitHub? И почему в компаниях используют GitLab
4. Как бы ты внедрил базовый CI/CD для Go-проекта с тестированием и деплоем?

---

2-3 дня (Принципы правильного написания приложения)

==============================
    System Design
==============================
1. Объясни CAP-теорему: что такое Consistency, Availability, Partition tolerance, и почему нельзя добиться всех трёх сразу.
2. Приведи примеры систем с акцентом на CA, CP и AP.
3. Какие паттерны масштабирования знаешь (Vertical vs Horizontal scaling)?
4. Что такое Transactional Outbox и Saga  и для чего используются?
5. Расскажи о некоторых распространённых архитектурных паттернах (Circuit Breaker, Retry, CQRS).

---

1 день (Go под капотом)

==============================
    Планировщик и сборщик мусора в Go:
==============================
1. Объясни, как работает планировщик горутин в Go (M:N планирование).
2. Что такое G, P, M в контексте Go runtime и как они взаимодействуют?
3. Как влияет количество goroutine на производительность и использование ресурсов?
4. Что такое work-stealing и как оно помогает в планировщике Go?
5. Чем горутины отличаются от обычных потоков(тредов) и почему они работаю оптимальнее?
6. Как данные в Go очищаются? Как это влияет на скорость и как нам не класть данные в кучу?

---

3-7 дней (Контроль качества 1)

==============================
    Мониторинг (Prometheus, Grafana)
==============================
1. Как работает Prometheus, что такое "pull модель" и для чего нужны Exporters?
2. Как использовать метрики (counters, gauges, histograms, summaries) для мониторинга?
3. Как Grafana помогает визуализировать метрики, и какие дашборды ты бы настроил для сервиса?

==============================
    Тестирование
==============================
1. Какие типы тестов ты знаешь (unit, mock, integration, end-to-end) и когда какой применять?
2. Как писать unit-тесты в Go, какие инструменты и пакеты для этого используешь?

==============================
    Дебаг приложения
==============================
1. Какие инструменты дебага и профилирования есть в Go (pprof и т.д.)?
2. Как найти "узкие места" в производительности Go-приложения?

==============================
    Git
==============================
1. Как работает Git, в чём разница между merge и rebase?
2. Что такое Git flow development?
3. Как откатить коммит и что делать, если нужно отменить изменения, уже попавшие в общий репозиторий?

==============================
    Swagger
==============================
1. Для чего используется Swagger/OpenAPI и как он упрощает документирование REST API?
2. Как автоматизировать генерацию Swagger спецификаций для Go-сервиса?

---

1-2 дня (Контроль качества 2)

==============================
    Логирование (Zap, Logrus, Zerolog)
==============================
1. Чем Logrus отличается от Zap и Zerolog с точки зрения производительности?
2. Когда стоит предпочесть структурированное логирование простому текстовому?
3. Что такое хуки в контексте логгеров и зачем они нужны?
4. В каких случаях выбирают Logrus, несмотря на его относительно низкую производительность?

---

1-2 дня (Примеры задач к легенде)

==============================
    Практические аспекты архитектуры
==============================
1. Как разложить монолит на микросервисы и какие преимущества и недостатки это даёт?
2. Как организовать коммуникацию между микросервисами?.
3. Что такое идемпотентность API и почему она важна при повторной отправке запросов?
4. как оптимизировать запросы в postgresql?