На изучение (x-y дней)

3-7 дней (Хранение и передача информации 1)

==============================
    Redis
==============================
1. Чем Redis отличается от реляционной базы данных?
2. Что такое TTL и каким образом его правильно использовать в Redis?
3. Как очистить кеш Redis?

==============================
    Kafka
==============================
1. Объясни базовые концепции Kafka: брокеры, топики, партиции, продюсеры, консьюмеры.
2. Как гарантировать доставку сообщений "ровно один раз" или хотя бы "по меньшей мере один раз" и "не больше одного раза"?
3. Зачем нужна репликация в Kafka и как это влияет на доступность и консистентность?
4. Что будет с данными Kafka при перезагрузки системы и почему?
5. Можно ли использовать шину данных Kafka для общение между микросервисами и чем это будет отличаться от общения по http соединениям?

==============================
    Отличия Kafka и RabbitMQ
==============================
1. Назови основные различия в моделях очередей и топиков между Kafka и RabbitMQ.
2. Когда стоит предпочесть RabbitMQ вместо Kafka и наоборот?

==============================
    NoSQL
==============================
1. Объясни, чем NoSQL базы отличаются от реляционных и в каких случаях они предпочтительнее.

---

4-9 дней (Хранение и передача информации 2)

==============================
    Углублённо Postgres
==============================
1. Расскажи о типах индексов в PostgreSQL (B-Tree) и в каких случаях какой лучше использовать(подробнее про B-Tree). Какие плюсы и минусы у всех индексов?
2. Как работают транзакции в PostgreSQL? Какие виды транзакций бывают и чем отличаются? Что такое ACID и уровни изоляции транзакций?
3. Что такое шардирование, партицирование, репликации и когда применяются эти механизмы?
4. Как пользоваться `EXPLAIN` и `EXPLAIN ANALYZE` для анализа производительности запросов и на что обращать внимание в плане выполнения запроса?

---

1-2 дня (HTTP API)

==============================
    HTTP/HTTPS
==============================
1. В чём разница между HTTP и HTTPS?
2. Что такое TLS и зачем нужен сертификат?
3. Разница между HTTP/2 и HTTP/1.1?

==============================
    gRPC
==============================
1. В чём преимущества gRPC по сравнению с REST?
2. Как работает Protocol Buffers (protobuf) и чем он хорош?
3. Когда стоит использовать gRPC, а когда REST?

---

1-2 дня (Примеры задач к легенде)

==============================
    Практические аспекты архитектуры
==============================
1. Как разложить монолит на микросервисы и какие преимущества и недостатки это даёт?
2. Как организовать коммуникацию между микросервисами?.
3. Что такое идемпотентность API и почему она важна при повторной отправке запросов?
4. Как оптимизировать запросы в postgresql?

---

2-3 дня (Принципы правильного написания приложения)

==============================
    System Design
==============================
1. Что такое Transactional Outbox и Saga  и для чего используются?
2. Расскажи о некоторых распространённых архитектурных паттернах (Circuit Breaker, Retry, CQRS).
3. Какие паттерны масштабирования знаешь (вертикальное и горизонтальное масштабирование)?

---

3-7 дней (Контроль качества 1)

==============================
    Мониторинг (Prometheus, Grafana)
==============================
1. Как работает Prometheus?
2. Что делает Grafana?

==============================
    Тестирование
==============================
1. "unit, mock, integration -тесты" что это такое и чем отличается?

==============================
    Дебаг приложения
==============================
1. Какие инструменты дебага и профилирования есть в Go (pprof)?

==============================
    Git
==============================
1. Как работает Git, в чём разница между merge и rebase?

==============================
    Swagger
==============================
1. Для чего используется Swagger?

---

1-2 дня (Контроль качества 2)

==============================
    Логирование
==============================
1. Для чего нужно логирование и как его применить?

---

1-2 дня (Автоматизация)

==============================
    CI/CD
==============================
1. Что такое CI/CD и зачем он нужен в процессе разработки?
2. Какие основные этапы есть в типичном CI/CD пайплайне?
3. Чем отличаются GitLab от GitHub? И почему в компаниях используют GitLab
